#version 330 core
layout (location = 0) in vec3 vertex_position;
layout (location = 1) in vec3 vertex_normal;
layout (location = 2) in vec2 vertex_texture;
layout (location = 3) in vec3 tangent_data;
layout (location = 4) in vec3 bitangent_data;
layout (location = 5) in vec2 normal_data;

out vec3 FragPos;
out vec3 Normal;

out vec2 TexCoords;
out vec3 TangentLightPos;
out vec3 TangentViewPos;
out vec3 TangentFragPos;

uniform mat4 model;
uniform mat4 view;
uniform mat4 proj;

uniform vec3 light_position; 
uniform vec3 cameraPos; 

void main()
{
    //vec2 TexCoords;

    FragPos = vec3(model * vec4(vertex_position, 1.0));
    Normal = mat3(transpose(inverse(model))) * vertex_normal;  
    
    //gl_Position = proj * view * vec4(FragPos, 1.0);
    //==========================

    TexCoords = vertex_texture;
    
    mat3 normalMatrix = transpose(inverse(mat3(model)));
    vec3 T = normalize(normalMatrix * tangent_data);
    vec3 N = normalize(normalMatrix * vertex_normal);
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    
    mat3 TBN = transpose(mat3(T, B, N));    
    TangentLightPos = TBN * light_position;
    TangentViewPos  = TBN * cameraPos;
    TangentFragPos  = TBN * FragPos;
        
    //gl_Position = proj * view * model * vec4(vertex_position, 1.0);
    gl_Position = proj * view * vec4(FragPos, 1.0);
}