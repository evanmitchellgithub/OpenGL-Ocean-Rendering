#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 light_position; 
uniform vec3 cameraPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform float shininess;

in vec2 TexCoords;
in vec3 TangentLightPos;
in vec3 TangentViewPos;
in vec3 TangentFragPos;

//uniform sampler2D diffuseMap;
//uniform sampler2D normalMap;
uniform sampler2D texture1; //normalmap


void main()
{

    //Normal map stuff
    vec3 norm = texture(texture1,TexCoords).rgb;
    norm = normalize(norm*2.0-1.0); // this normal is in tangent space
    vec3 lightDir = normalize(TangentLightPos - TangentFragPos);
    vec3 viewDir = normalize(TangentViewPos - TangentFragPos);
    vec3 reflectDir = reflect(-lightDir, norm);
    vec3 halfwayDir = normalize(lightDir + viewDir);


    // ambient
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * lightColor;
  	
    // diffuse 
    //vec3 norm = normalize(Normal);//<======================================================================
    //vec3 lightDir = normalize(light_position - FragPos);//<================================================
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // specular
    float specularStrength = 0.8;
    //vec3 viewDir = normalize(cameraPos - FragPos); //<=====================================================
    //vec3 reflectDir = reflect(-lightDir, norm);  //<=======================================================

    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    float spec = pow(max(dot(norm, halfwayDir), 0.0), 32.0f);

    //float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
    vec3 specular = specularStrength * spec * lightColor;  
        
    vec3 result = (ambient + diffuse + specular) * objectColor;
    FragColor = vec4(result, 1.0);
} 