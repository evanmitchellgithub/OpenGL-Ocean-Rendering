#version 330 core
out vec4 FragColor;

in vec3 Normal;  
in vec3 FragPos;  
  
uniform vec3 light_position; 
uniform vec3 cameraPos; 
uniform vec3 lightColor;
uniform vec3 objectColor;
uniform float shininess;

in vec2 TexCoords;

uniform sampler2D wavesNormalMap;
uniform sampler2D normalMap1;
uniform sampler2D normalMap2;
uniform sampler2D water; //foam
uniform float wavesOffset;
uniform float interpolateFactor;
uniform vec3 direction;

uniform samplerCube skybox;

// Compute the luminance of a color using the dot product with a set of weights
float luminance(vec3 Colour) {
    	return dot(Colour, vec3(0.2126, 0.7152, 0.0722));
}

// Compute the distribution of microfacets oriented along the surface normal and the half vector
// based on Beckmann distribution and return the value of the distribution function
float Lambda(float cosTheta, float sigmaSq) {
	float v = cosTheta / sqrt((1.0 - cosTheta * cosTheta) * (2.0 * sigmaSq));

	return (exp(-v * v)) / (2.0 * v * sqrt(3.14)); // approximate, faster than formula used
}

// Compute the radiance reflected by the sun
float reflectedSunRadiance(vec3 lightDir, vec3 viewDir, vec3 norm) {
	// Compute the halfway vector between light direction and view 
    	vec3 H = normalize(-lightDir + viewDir);

	// Compute the tangent vectors along the surface
    	vec3 Ty = normalize(vec3(0.0, norm.z, -norm.y));
    	vec3 Tx = cross(Ty, norm);

    	float sigma = 0.5;
    	float sigmax = 0.01;
    	float sigmay = 0.34;

	// Compute the components of the microfacet orientation vector in the tangent space
    	float zetax = dot(H, Tx) / dot(H, norm);
    	float zetay = dot(H, Ty) / dot(H, norm);

    	float zL = dot(lightDir, norm); // cos of source zenith angle
    	float zV = dot(viewDir, norm); // cos of receiver zenith angle
    	float zH = dot(H, norm); // cos of facet normal zenith angle
    	float zH2 = zH * zH;

	// Compute the Beckmann distribution function for the microfacet orientation
    	float p = exp(-0.5 * ((zetax * zetax) / sigmax + zetay * zetay / sigmay)) / (2.0 * 3.14 * sqrt(sigmax * sigmay));

	// Compute the tangent and normal components of the view direction
    	float tanV = atan(dot(viewDir, Ty), dot(viewDir, Tx));
    	float cosV2 = 1.0 / (1.0 + tanV * tanV);
    	float sigmaV2 = sigmax * cosV2 + sigmay * (1.0 - cosV2);

	// Compute the tangent and normal components of the light direction
    	float tanL = atan(dot(lightDir, Ty), dot(lightDir, Tx));
    	float cosL2 = 1.0 / (1.0 + tanL * tanL);
    	float sigmaL2 = sigmax * cosL2 + sigmay * (1.0 - cosL2);

	// Compute the fresnel term for the specular reflection
    	float fresnel = 0.02 + 0.98 * pow(1.0 - dot(viewDir, H), 5.0);

	// Ensure that zL and zV are not zero to avoid division by zero
    	zL = max(zL, 0.01);
    	zV = max(zV, 0.01);

    	return fresnel * p  / ((1.0 + Lambda(zL, sigmaL2) + Lambda(zV, sigmaV2)) * zV * zH2 * zH2 * 4.0);
}

// This function computes the contribution of the sun to the lighting of a water surface
vec3 sun_contribution(float spec, float diff, vec3 lightDir, vec3 viewDir, vec3 norm)
{
    	// Compute direct lighting from the sun by reflecting its radiance off the water surface
    	float suncontrib = reflectedSunRadiance(vec3(lightDir.x,-lightDir.y,lightDir.z), viewDir, norm);
    	vec3 sunColour = vec3(1.0, 1.0, 0.85);
    	vec3 skyColour = vec3(0.76,0.98,1.0) * diff * 0.4;
 	// Compute the total sun contribution as the product of the sun color and the direct lighting
    	return sunColour * suncontrib;
}

// This function computes the contribution of the sky to the lighting of a water surface
vec3 sky_contribution(vec3 norm, vec3 Reflect, float ratio)
{
    	//The paper implementation finds the slope of the wave, calculates the normals, then
    	//uses that to get a sample from a sky texture for the sky contribution.
    	//It does use a fresnel component to determine the light that is reflected vs refracted into the water

        // Compute indirect lighting/reflections
    	Reflect = Reflect * (0.5 / 1.1);
    	vec3 ReflectColour = texture(skybox, Reflect).rgb;
    	vec3 SkyContribution = mix(vec3(0.0, 0.05, 0.1), ReflectColour*0.8, ratio);

    	return SkyContribution;

}

// This function computes the contribution of the sea to the lighting of a water surface
vec3 sea_contribution2(vec3 sunColour, vec3 skyColour, vec3 norm, vec3 lightDir)
{
    	float sunRad = luminance(sunColour);
    	float skyRad = luminance(skyColour);
	// Compute the total lighting as the sum of the sun and sky radiance, scaled by a constant factor
    	float calc = (sunRad * max(dot(norm, vec3(lightDir.x, lightDir.y, lightDir.z)), 0.0) + skyRad) / 3.14;
    	vec3 Rs = 0.6 * vec3(0.3,0.9,1.0) * calc;
    	return Rs;

}

// Function to calculate the error function (erf)
float erf(float x) {
   	// Constants used in the calculation of erf
	float a  = 0.140012;
	float x2 = x*x;
	float ax2 = a*x2;
	// Calculate erf value and return
	return sign(x) * sqrt( 1.0 - exp(-x2*(4.0/3.14 + ax2)/(1.0 + ax2)) );
}

// Function to calculate whitecap coverage percentage based on epsilon, mu, and jSigma2
float whitecapCoverage(float epsilon, float mu, float jSigma2) {
	// Ensure jSigma2 is not negative
	float jSigma2_clamped = max(jSigma2, 0.0);
	float sqrt2 = sqrt(2.0);
	float x = 0.5 * sqrt2 * (epsilon - mu) / sqrt(jSigma2_clamped);
	// Calculate and return whitecap coverage
	return max(0.5 * (1.0 + erf(x)), 0.0); //erf returns values between -1 and 1, we need 0 to 1. 
}

// Function which specifies where on the water surface is foam and where is not
vec3 foam_contribution(float detJ, vec3 norm, vec3 lightDir, vec3 foamColour, vec3 sunColour, vec3 skyColour, float jSigma2){
	float jacobian_scale = 0.5f;

	// Get coverage percentage
	float WhitecapCoverage = whitecapCoverage(jacobian_scale,detJ,jSigma2);

	// Changing surface normal, imitates reflectance changes
	norm = texture(water, vec2(10*TexCoords.x, 10*TexCoords.y)).rgb; 

	// Compute and add whitecap radiance
	vec3 l = ((foamColour * (max(dot(norm, lightDir), 0.0))) + skyColour ) / 3.14;
	vec3 foam = vec3(WhitecapCoverage * l * 1.5);
	return foam;
}


void main()
{

    	//Ocean surface normal maps
    	vec3 normalColor0 = texture(wavesNormalMap,vec2(TexCoords.x, TexCoords.y+ wavesOffset)).rgb;
    	vec3 normalColor1 = texture(normalMap1, vec2(TexCoords.x, TexCoords.y)).rgb;
    	vec3 normalColor2 = texture(normalMap2, vec2(TexCoords.x, TexCoords.y)).rgb;
    	vec3 normalColor = mix(normalColor1, normalColor2, interpolateFactor).rgb;
    	normalColor = mix(normalColor, normalColor0, 0.45).rgb;
    	vec3 norm = vec3(normalColor.r * 2.0 - 1.0, normalColor.b * 2.0, normalColor.g * 2.0 - 1.0);

    	norm = normalize(norm);


    	//Lighting - Phong - Specular only
    	vec3 tempdirection = vec3(-1.0, -1.0, -4.0);
    	vec3 lightDir = normalize(light_position - FragPos); //light_position
    	vec3 viewDir = normalize(cameraPos - FragPos);
    	vec3 reflectDir = reflect(-lightDir, norm);  
    	vec3 halfwayDir = normalize(lightDir + viewDir);
    	float diff = max(dot(norm, lightDir), 0.0);
    	float specularStrength = 0.8;
    	float spec = pow(max(dot(norm, halfwayDir), 0.0), 512.0f);
    	vec3 specular = specularStrength * spec * lightColor;  


    	//Reflection and refraction
    	float Eta = 0.9;
    	float FresnelPower = 0.9;
    	float F = ((1.0-Eta) * (1.0-Eta)) / ((1.0+Eta)*(1.0+Eta));   
    	vec3 I = normalize(FragPos - cameraPos); 
    	float ratio = F + (1.0 - F)*pow((1.0-dot(-I, norm)), FresnelPower);
    	vec3 Reflect = reflect(I, norm);


    	// Calculate the partial derivatives - approximating the jacobian matrix
	// Used for foam calculations
    	vec3 dpdx = dFdx(FragPos);
    	vec3 dpdy = dFdy(FragPos);
        // Calculate the Jacobian matrix and its determinant
        mat2 J = mat2(dpdx.x, dpdy.x, dpdx.y, dpdy.y);
    	float detJ = determinant(J);
	vec3 dndv = normalize(cross(dFdx(texture(wavesNormalMap, TexCoords)).rgb, dFdy(texture(wavesNormalMap, TexCoords)).rgb));
	float jSigma2 = dot(dndv, cross(direction, norm));


	// Calculate the different lighting components
    	vec3 skyColour = sky_contribution(norm,Reflect,ratio);
    	vec3 sunColour = sun_contribution(spec, diff,lightDir, viewDir, norm);
    	vec3 seaColour = sea_contribution2(sunColour,skyColour,norm,lightDir);
    	vec3 baseColour = vec3(0.05, 0.55, 0.75) * 0.3;

	// R~= W*RF + RC + RW
    	// Radiance ~= (fractional foam coverage)*(foam reflectance) + clear(foam free) reflectance + and water-leaving
	vec3 oceanFinal;
	if(detJ < 0.0 && FragPos.y > 2.5){
		//Add the foam contribution in the specified areas
		vec3 foamContrib = foam_contribution(detJ, norm, lightDir, vec3(1.0, 1.0, 1.0), sunColour, skyColour, jSigma2);
		oceanFinal = sunColour + skyColour + seaColour + foamContrib;

	}
	else{
		oceanFinal = sunColour + skyColour + seaColour;
	}
    
	// Output the final colour
    	FragColor = vec4(oceanFinal, 1.0);

} 